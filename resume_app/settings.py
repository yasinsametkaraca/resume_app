"""
Django settings for resume_app project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import environ


env = environ.Env(DEBUG=(bool, False),)  # DEBUG degeri env dosyasında varsa onu al yoksa False al
environ.Env.read_env()  # docker.env dosyasını oku

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

ALLOWED_HOSTS = env('ALLOWED_HOSTS', cast=list)  # ALLOWED_HOSTS degeri env dosyasından okur. Cast=list ile listeye cevirir.


CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS', cast=list)  # CSRF_TRUSTED_ORIGINS means which domains are trusted by the CSRF protection.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
    'contact',
    'feature',
    'storages',  # This is a third party library. This library is used for AWS S3.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'resume_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.views.layout',
            ],
        },
    },
]

WSGI_APPLICATION = 'resume_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default': env.db()  # db() means which database will be used. This is a third party library. env dosyasından db bilgilerini otomatik alır. db bilgileri docker.env dosyasında vardır.
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_DIRS = [BASE_DIR / 'static']  # STATICFILES_DIRS means where static files will be collected

if DEBUG:  # development mode
    STATIC_URL = '/static/'  # STATIC_URL means where static files will be served
    STATIC_ROOT = BASE_DIR / 'staticfiles'  # STATIC_ROOT means where static files will be collected. Collectstatic komutu ile static dosyaları toplar. Deploy ederken kullanılır.

    MEDIA_URL = '/media/'  # MEDIA_URL means where media files will be served
    MEDIA_ROOT = BASE_DIR / 'media'  # MEDIA_ROOT means where media files will be collected

    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
else:  # production mode
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME')

    DEFAULT_FILE_STORAGE = 'resume_app.custom_storages.MediaStorage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'  # This is a third party library. This library is used for AWS S3. STATICFILES_STORAGE means where static files will be collected

    AWS_DEFAULT_ACL = 'public-read'  # AWS_DEFAULT_ACL means which permission will be used for AWS S3. Public-read means everyone can read this files. Static files are public files.
    AWS_S3_OBJECT_PARAMETERS = {
        'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
        'CacheControl': 'max-age=94608000'
    }

    STATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/static/'  # bütün yapılan yükleme işlemleri bu url üzerinden yapılır.
    STATIC_ROOT = STATIC_URL

    MEDIA_LOCATION = 'media'
    DOCUMENT_LOCATION = MEDIA_LOCATION + '/documents'
    IMAGE_SETTING_LOCATION = MEDIA_LOCATION + '/image_settings'


DEFAULT_PNG = STATIC_URL + 'default.png'


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email settings
# https://docs.djangoproject.com/en/4.1/topics/email/
vars().update(env.email_url())  # EMAIL_URL means which email service will be used. This is a third party library.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

